{"version":3,"sources":["assets/earth.jpg","components/Earth.js","game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["extend","OrbitControls","Earth","props","mesh","useRef","controls","useState","active","setActive","useControl","type","state","useFrame","current","rotation","y","update","CameraControls","useThree","camera","domElement","gl","autoRotate","autoRotateSpeed","minZoom","maxZoom","ref","args","texture","useMemo","THREE","load","earth","onClick","e","attach","transparent","side","object","EarthScene","intensity","position","angle","penumbra","Stars","Game","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"2OAAe,MAA0B,kC,QCOzCA,YAAO,CAAEC,oBACT,IAuDeC,EAvDD,SAACC,GACb,IAAMC,EAAOC,mBACPC,EAAWD,mBAFM,EAGKE,oBAAS,GAHd,mBAGhBC,EAHgB,KAGRC,EAHQ,KAKvBC,YAAW,SAAU,CACnBC,KAAM,UACNC,MAAO,CAACJ,EAAQC,KAGlBI,aAAS,WACPT,EAAKU,QAAQC,SAASC,GAAK,KAC3BV,EAASQ,QAAQG,YAGnB,IAAMC,EAAiB,WAAO,IAAD,EAIvBC,cAFFC,EAFyB,EAEzBA,OACMC,EAHmB,EAGzBC,GAAMD,WAER,OACE,+BACEE,YAAY,EACZC,gBAAiB,GACjBC,QAAS,EACTC,QAAS,GACTC,IAAKrB,EACLsB,KAAM,CAACR,EAAQC,MAKfQ,EAAUC,mBAAQ,kBAAM,IAAIC,iBAAsBC,KAAKC,KAAQ,IAErE,OACE,qCACE,cAACf,EAAD,IACA,iDACMf,GADN,IAEEwB,IAAKvB,EAEL8B,QAAS,SAACC,GAAD,OAAO1B,GAAWD,IAJ7B,UAME,sCAAsBoB,KAAM,CAAC,EAAG,GAAI,MACpC,mCACEQ,OAAO,WACPC,aAAW,EACXC,KAAMP,aAHR,SAKE,2BAAWK,OAAO,MAAMG,OAAQV,c,QCjDpCW,EAAa,kBACjB,eAAC,IAAD,WACE,8BAAcC,UAAW,KACzB,2BAAWC,SAAU,CAAC,GAAI,GAAI,IAAKC,MAAO,IAAMC,SAAU,IAC1D,4BAAYF,SAAU,EAAE,IAAK,IAAK,MAClC,cAAC,EAAD,CAAOA,SAAU,CAAC,EAAG,EAAG,KACxB,cAACG,EAAA,EAAD,QAQWC,EAJF,WACX,OAAO,cAAC,EAAD,KCZMC,EAJH,WACV,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,EAAgBc,QAAQC,O","file":"static/js/main.39eb768d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/earth.3148104f.jpg\";","import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame, useThree, extend } from \"react-three-fiber\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport earth from \"../assets/earth.jpg\";\nimport { useControl } from \"react-three-gui\";\n\nextend({ OrbitControls });\nconst Earth = (props) => {\n  const mesh = useRef();\n  const controls = useRef();\n  const [active, setActive] = useState(false);\n\n  useControl(\"active\", {\n    type: \"boolean\",\n    state: [active, setActive],\n  });\n\n  useFrame(() => {\n    mesh.current.rotation.y += 0.001;\n    controls.current.update();\n  });\n\n  const CameraControls = () => {\n    const {\n      camera,\n      gl: { domElement },\n    } = useThree();\n    return (\n      <orbitControls\n        autoRotate={true}\n        autoRotateSpeed={0.1}\n        minZoom={2.0}\n        maxZoom={20.0}\n        ref={controls}\n        args={[camera, domElement]}\n      />\n    );\n  };\n\n  const texture = useMemo(() => new THREE.TextureLoader().load(earth), []);\n\n  return (\n    <>\n      <CameraControls />\n      <mesh\n        {...props}\n        ref={mesh}\n        // scale={active ? [2, 2, 2] : [1.5, 1.5, 1.5]}\n        onClick={(e) => setActive(!active)}\n      >\n        <sphereBufferGeometry args={[1, 20, 20]} />\n        <meshBasicMaterial\n          attach=\"material\"\n          transparent\n          side={THREE.DoubleSide}\n        >\n          <primitive attach=\"map\" object={texture} />\n        </meshBasicMaterial>\n      </mesh>\n    </>\n  );\n};\nexport default Earth;\n","import React from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport * as THREE from \"three\";\nimport Earth from \"../components/Earth\";\nimport { Stars } from \"drei/Stars\";\n\nconst PROD = process.env.NODE_ENV === \"production\";\n\nconst EarthScene = () => (\n  <Canvas>\n    <ambientLight intensity={0.5} />\n    <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />\n    <pointLight position={[-10, -10, -10]} />\n    <Earth position={[0, 0, 0]} />\n    <Stars />\n  </Canvas>\n);\n\nconst Game = () => {\n  return <EarthScene />;\n};\n\nexport default Game;\n","import Game from \"./game/Game\";\nimport Menu from \"./menu/Menu\";\n\nconst App = () => {\n  return <Game />;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals(console.log);"],"sourceRoot":""}